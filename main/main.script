local MAP = require("minimap.map")
local RC = require "rendercam.rendercam"

local range = 2000
local tile_size = 128
local player_position

local wall_alpha = 1

local highlighted
local selected

local target_shown = false

local collisions = vmath.vector3()

local player_speed = 750
local player_turn_rate = 1.8

local camera_mode = hash("3d")

local map_zoom = 1000

local function update_camera()
	go.set("/camera_map", "position", vmath.vector3(player_position.x, player_position.y, map_zoom))
	local player_euler = go.get("/player", "euler")
	if camera_mode == hash("locked") then
		
	else
		go.set("/camera_3d", "euler", vmath.vector3(90, 0, player_euler.z - 180))
		local coor = (go.get_world_position("/player") - go.get_world_position("/map")) / tile_size
		go.set_position(vmath.vector3(coor.x, coor.y, -0.1), "/camera_3d")
	end
end

local function switch_camera_mode(mode)
	if mode then
		camera_mode = mode
	else
		if camera_mode == hash("map") then
			camera_mode = hash("3d")
		elseif camera_mode == hash("3d") then
			camera_mode = hash("map")
		else
			return
		end
	end
	if camera_mode == hash("map") then
		msg.post("@render:", hash("set_cam"), {cam = hash("map")})
		msg.post("/hud", hash("map_switched"), {map = false})
	elseif camera_mode == hash("3d") then
		msg.post("@render:", hash("set_cam"), {cam = hash("3d")})
		msg.post("/hud", hash("map_switched"), {map = true})
	end
	update_camera()
end

local function get_object_coords(pos)
	pos = (pos - go.get_world_position("/map")) / tile_size
	return pos.x, pos.y
end

local function get_map_position(x, y)
	return vmath.vector3(x, y, 0) * tile_size
end

local function get_wall_coords(pos)
	pos = (pos - go.get_world_position("/map")) / tile_size
	local x_diff = (pos.x + 0.5) % 1 - 0.5
	local y_diff = (pos.y + 0.5) % 1 - 0.5
	local vertical = math.abs(x_diff) < math.abs(y_diff)
	if vertical then
		pos.x = math.floor(pos.x + 0.5)
		pos.y = math.floor(pos.y)
		vertical = "w"
	else
		pos.x = math.floor(pos.x)
		pos.y = math.floor(pos.y + 0.5)
		vertical = "s"
	end
	return pos.x + 1, pos.y + 1, vertical
end

local function find_wall(dir)
	local ray = physics.raycast(player_position, player_position + dir, {hash("wall")})
	if not ray then return end
	local x, y, vertical = get_wall_coords(ray.position)

	MAP.to_render[x] = MAP.to_render[x] or {}
	MAP.to_render[x][y] = MAP.to_render[x][y] or {}

	MAP.low_x = math.min(MAP.low_x or x, x)
	MAP.high_x = math.max(MAP.high_x or x, x)
	MAP.low_y = math.min(MAP.low_y or y, y)
	MAP.high_y = math.max(MAP.high_y or y, y)

	if not MAP.to_render[x][y][vertical] then
		MAP.to_render[x][y][vertical] = true

		local endpoint, angle, dir
		if vertical == "w" then
			endpoint = vmath.vector3((x - 1) * tile_size, y * tile_size + 1, 0)
			angle = math.atan2(player_position.x - endpoint.x, endpoint.y - player_position.y)
			dir = vmath.rotate(vmath.quat_rotation_z(angle), vmath.vector3(0, range, 0))
			find_wall(dir)
			
			endpoint = vmath.vector3((x - 1) * tile_size, (y - 1) * tile_size - 1, 0)
			angle = math.atan2(player_position.x - endpoint.x, endpoint.y - player_position.y)
			dir = vmath.rotate(vmath.quat_rotation_z(angle), vmath.vector3(0, range, 0))

			find_wall(dir)
		else
			endpoint = vmath.vector3(x * tile_size + 1, (y - 1) * tile_size, 0)
			angle = math.atan2(player_position.x - endpoint.x, endpoint.y - player_position.y)
			dir = vmath.rotate(vmath.quat_rotation_z(angle), vmath.vector3(0, range, 0))
			find_wall(dir)

			endpoint = vmath.vector3((x - 1) * tile_size - 1, (y - 1) * tile_size, 0)
			angle = math.atan2(player_position.x - endpoint.x, endpoint.y - player_position.y)
			dir = vmath.rotate(vmath.quat_rotation_z(angle), vmath.vector3(0, range, 0))
			find_wall(dir)
		end
	end
end

local function create_geometry(x, y, wall_type)
	local tex = MAP.cells[x][y][wall_type].texture
	local rotation = vmath.quat(0, 0, 0, 1)
	local offset = vmath.vector3(x - 0.5, y - 0.5, 0)
	if wall_type == "c" or wall_type == "f" then
		if wall_type == "c" then
			offset.z = 0.5
		else
			offset.z = -0.5
		end
	else
		if wall_type == "w" then
			rotation = vmath.quat_rotation_y(math.rad(90)) * vmath.quat_rotation_z(math.rad(90))
			offset.x = offset.x - 0.5
		else
			rotation = vmath.quat_rotation_x(math.rad(90))
			offset.y = offset.y - 0.5
		end
	end
	local new_go = factory.create("/map#spawn_wall", offset, rotation)
	local sprite_url = msg.url(nil, new_go, "sprite")
	sprite.play_flipbook(sprite_url, tex)
	local size = go.get(sprite_url, "size")
	go.set(sprite_url, "scale", vmath.vector3(1 / size.x, 1 / size.y, 1))
	return new_go
end

local function spawn_walls()
	for x, val in pairs(MAP.to_render) do
		for y, v in pairs(val) do
			for wall_type, _ in pairs(v) do
				if not MAP.wall_gos[x] or not MAP.wall_gos[x][y] or not MAP.wall_gos[x][y][wall_type] then
					MAP.wall_gos[x] = MAP.wall_gos[x] or {}
					MAP.wall_gos[x][y] = MAP.wall_gos[x][y] or {}
					MAP.wall_gos[x][y][wall_type] = create_geometry(x, y, wall_type)
				end
			end
		end
	end
end

local function find_walls()
	player_position = go.get_world_position()
	MAP.to_render = {}
	MAP.low_x = nil
	MAP.high_x = nil
	MAP.low_y = nil
	MAP.high_y = nil
	find_wall(vmath.vector3(range, 0, 0))
	for x = MAP.low_x, MAP.high_x do
		for y = MAP.low_y, MAP.high_y do
			if MAP.cells[x][y].f then
				MAP.to_render[x] = MAP.to_render[x] or {}
				MAP.to_render[x][y] = MAP.to_render[x][y] or {}
				MAP.to_render[x][y].f = true
				MAP.to_render[x][y].c = true
			end
		end
	end
	local class = {
		[hash("object")] = {factory = "/map#spawn_object", sprites = {
			[hash("stalactite")] = "stalactite"}
		},
		[hash("item")] = {factory = "/map#spawn_item", sprites = {
			[hash("stone")] = "stone",
			[hash("mushroom")] = "mushroom"}
		},
		[hash("actor")] = {factory = "/map#spawn_actor", sprites = {
			[hash("zombie")] = "zombie_front"}
		},
		[hash("screen")] = {factory = "/map#spawn_screen"}
	}
	MAP.low_x = MAP.low_x - 1
	MAP.low_y = MAP.low_y - 1
	local cam_euler = go.get("/camera_3d", "euler")
	for key, val in ipairs(MAP.entities) do
		local x, y = get_object_coords(go.get_world_position(val.script_url))
		if x > MAP.low_x and x < MAP.high_x and y > MAP.low_y and y < MAP.high_y then
			local z = go.get(val.script_url, "z")
			if not val.go then
				val.go = factory.create(class[val.class].factory, vmath.vector3(x, y, z - 0.5))
				go.set_scale(val.scale / 128, val.go)
				if class[val.class].sprites then
					sprite.play_flipbook(msg.url(nil, val.go, "sprite"), class[val.class].sprites[val.type])
				end
				if val.class == hash("screen") then
					go.set(val.go, "scale.y", 0.8 * val.scale.x / 128)
				end
			end
			if val.facing then
				go.set(val.go, "euler", val.facing)
			else
				go.set(val.go, "euler", cam_euler)
			end
			go.set(val.go, "position", vmath.vector3(x, y, z - 0.5))

			if val.class == hash("actor") then
				local angle = math.abs(go.get(msg.url(val.script_url).path, "euler.z") - go.get(".", "euler.z")) % 360
				angle = math.abs(go.get(msg.url(val.script_url).path, "euler.z") - go.get(".", "euler.z") % 360)

				local sprite_url = msg.url(nil, val.go, "sprite")
				if angle < 45 or angle > 315 then
					sprite.play_flipbook(sprite_url, "zombie_front")
				elseif angle < 135 or angle > 225 then
					sprite.play_flipbook(sprite_url, "zombie_side")
				else
					sprite.play_flipbook(sprite_url, "zombie_back")
				end
				sprite.set_hflip(sprite_url, angle > 180)
			end
			if key == selected then
				go.set(msg.url(nil, val.go, "sprite"), "tint", vmath.vector4(0, 0, 1, 1))
			elseif key == highlighted then
				go.set(msg.url(nil, val.go, "sprite"), "tint", vmath.vector4(0, 1, 0, 1))
			else
				local dist = vmath.length(go.get_world_position("/camera_3d") - go.get_world_position(val.go))
				local col = math.min(0.8 / dist, 0.5)
				go.set(msg.url(nil, val.go, "sprite"), "tint", vmath.vector4(col, col, col, 1))
			end
		elseif val.go then
			go.delete(val.go)
			val.go = nil
		end
	end
	
	spawn_walls()
	for x, _ in pairs(MAP.wall_gos) do
		for y, __ in pairs(_) do
			for wall_type, val in pairs(__) do
				if not MAP.to_render[x] or not MAP.to_render[x][y] or not MAP.to_render[x][y][wall_type] then
					go.delete(val)
					MAP.wall_gos[x][y][wall_type] = nil
				else
					local dist = vmath.length(go.get_world_position("/camera_3d") - go.get_world_position(val))
					local col = math.min(0.8 / dist, 0.5)
					go.set(msg.url(nil, val, "sprite"), "tint", vmath.vector4(col, col, col, wall_alpha))
				end
			end
		end
	end
end

function init(self)
	RC.activate_camera(go.get_id("/camera_map"))
	RC.activate_camera(go.get_id("/camera_3d"))
	math.randomseed(os.time())
	math.random(); math.random(); math.random()
	msg.post(".", hash("acquire_input_focus"))
	go.set_scale(1 / 128, "/target")
	msg.post("/target", hash("disable"))
	player_position = go.get_world_position()
	switch_camera_mode(hash("3d"))

	MAP.load_map("/map#map")
	
	timer.delay(0.1, false, function()
		find_walls()
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.normal.x == 1 or message.normal.x == -1 then
			collisions.x = message.normal.x
		end
		if message.normal.y == 1 or message.normal.y == -1 then
			collisions.y = message.normal.y
		end
		timer.delay(0, false, function()
			if message.normal.x ~= 0 then
				collisions.x = 0
			end
			if message.normal.y ~= 0 then
				collisions.y = 0
			end
		end)
	elseif message_id == hash("entity_created") then
		local x, y = get_object_coords(go.get_world_position(sender))
		table.insert(MAP.entities, {
			selectable = message.selectable,
			class = message.class,
			type = message.type,
			x = x, y = y,
			scale = message.scale,
			script_url = sender,
			facing = message.facing
		})
	elseif message_id == hash("attack_damage_point") then
		local angle = math.rad(go.get("/player", "euler.z"))
		local dir = vmath.rotate(vmath.quat_rotation_z(angle), vmath.vector3(0, -120, 0))
		local ray = physics.raycast(player_position, player_position + dir, {hash("wall")})
		if ray then
			local x, y, wall_type = get_wall_coords(ray.position)
			MAP.damage(x, y, wall_type, 50)
		end
	end
end

function update(self, dt)
	find_walls()
	update_camera()
	if target_shown then
		go.set("/target", "euler", go.get("/camera_3d", "euler"))
	end
end

function on_input(self, action_id, action)
	if camera_mode == hash("3d") then
		local closest_distance = 256
		local closest
		for key, val in ipairs(MAP.entities) do
			if val.selectable and val.go then
				local world_pos = go.get_world_position(val.go)
				local pos = RC.world_to_screen(world_pos, nil, nil, hash("/camera_3d"))
				local dist = vmath.length(pos - vmath.vector3(action.screen_x, action.screen_y, 0))
				if dist < 60 then
					local distance = vmath.length(player_position - go.get_world_position(val.script_url.path))
					if distance < closest_distance then
						closest_distance = distance
						closest = key
					end
				end
			end
		end
		highlighted = closest

		if target_shown then
			local x, y = RC.screen_to_viewport(action.screen_x, action.screen_y)
			local planeNormal, pointOnPlane = vmath.vector3(0, 0, 1), vmath.vector3(0, 0, -0.5)
			local pos = RC.screen_to_world_plane(x, y, planeNormal, pointOnPlane, hash("/camera_3d"))
			local ray = physics.raycast(player_position, get_map_position(pos.x, pos.y), {hash("wall")})
			if ray then
				x, y = get_object_coords(ray.position)
				go.set_position(vmath.vector3(x, y, 0), "/target")
			else
				go.set_position(vmath.vector3(pos.x, pos.y, pos.z), "/target")
			end
		end

		if action_id == hash("switch_camera_mode") and action.pressed then
			switch_camera_mode()
		elseif action_id == hash("up") then
			if action.released then
				go.cancel_animations("/player", "position")
			else
				local dir = vmath.rotate(go.get_rotation("/player"), vmath.vector3(0, -player_speed, 0))
				if collisions.x > 0 and dir.x < 0 then dir.x = 0 end
				if collisions.x < 0 and dir.x > 0 then dir.x = 0 end
				if collisions.y > 0 and dir.y < 0 then dir.y = 0 end
				if collisions.y < 0 and dir.y > 0 then dir.y = 0 end
				go.animate("/player", "position", go.PLAYBACK_ONCE_FORWARD, go.get_world_position("/player") + dir, go.EASING_LINEAR, 2)
			end
		elseif action_id == hash("down") then
			if action.released then
				go.cancel_animations("/player", "position")
			else
				local dir = vmath.rotate(go.get_rotation("/player"), vmath.vector3(0, player_speed, 0))
				if collisions.x > 0 and dir.x < 0 then dir.x = 0 end
				if collisions.x < 0 and dir.x > 0 then dir.x = 0 end
				if collisions.y > 0 and dir.y < 0 then dir.y = 0 end
				if collisions.y < 0 and dir.y > 0 then dir.y = 0 end
				go.animate("/player", "position", go.PLAYBACK_ONCE_FORWARD, go.get_world_position("/player") + dir, go.EASING_LINEAR, 2)
			end
		elseif action_id == hash("left") then
			go.set("/player", "euler.z", go.get("/player", "euler.z") + player_turn_rate)
		elseif action_id == hash("right") then
			local camera_euler = go.get("/camera_3d", "euler.y")
			go.set("/player", "euler.z", go.get("/player", "euler.z") - player_turn_rate)
		elseif action_id == hash("attack") and action.pressed then
			msg.post("/hud", hash("attack"))
		elseif action_id == hash("click") and action.pressed then
			if selected then
				local pos = go.get_world_position("/target")
				pos = get_map_position(pos.x, pos.y)
				local dist = vmath.length(go.get_world_position(MAP.entities[selected].script_url.path) - pos)
				go.animate(MAP.entities[selected].script_url.path, "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, dist / 100)
				selected = nil
				target_shown = false
				msg.post("/target", hash("disable"))
			elseif highlighted then
				local entity = MAP.entities[highlighted]
				if entity.class == hash("item") then
					go.delete(entity.script_url.path)
					go.delete(entity.go)
					table.remove(MAP.entities, highlighted)
				elseif entity.class == hash("actor") then
					msg.post("/target", hash("enable"))
					target_shown = true
					selected = highlighted
				elseif entity.type == hash("screen") then
					camera_mode = hash("locked")
					local rot = go.get_rotation(entity.go)
					local pos = go.get_world_position(entity.go)
					local new_pos = pos + vmath.rotate(rot, vmath.vector3(0, 0, 0.271))
					new_pos.z = -0.1
					go.animate(msg.url(nil, entity.go, "sprite"), "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 1, 1), go.EASING_INOUTSINE, 1)
					go.animate("/camera_3d", "rotation", go.PLAYBACK_ONCE_FORWARD, rot, go.EASING_INOUTSINE, 1)
					go.animate("/camera_3d", "position", go.PLAYBACK_ONCE_FORWARD, new_pos, go.EASING_INOUTSINE, 1, 0, function()
						switch_camera_mode(hash("map"))
					end)
					go.cancel_animations("/player", "position")
					go.animate("/player", "euler.z", go.PLAYBACK_ONCE_FORWARD, entity.facing.z + 180, go.EASING_INOUTSINE, 1)
					go.animate("/player", "position", go.PLAYBACK_ONCE_FORWARD, get_map_position(new_pos.x, new_pos.y), go.EASING_INOUTSINE, 1)
				end
			end
		end
	elseif camera_mode == hash("map") then
		if action_id == hash("switch_camera_mode") and action.pressed then
			switch_camera_mode()
		elseif action_id == hash("up") then
			switch_camera_mode(hash("3d"))
		elseif action_id == hash("down") then
			switch_camera_mode(hash("3d"))
		elseif action_id == hash("left") then
			switch_camera_mode(hash("3d"))
		elseif action_id == hash("right") then
			switch_camera_mode(hash("3d"))
		elseif action_id == hash("click") and action.pressed then
			
		end
	end
end
