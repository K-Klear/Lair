local player = require("main/player_info")
local screen_size = require("main/3d_view/screen_size")
local map = require("main/map/map")
local F = require("main/functions")

local walls = {}		-- wall GOs
local entities = {}		-- sprite GOs
local actors = {}		-- creatures
local items = {}		-- stuff that can be picked up
local objects = {}		-- furniture, scenery etc.

local wall_x = 512						-- texture size
local scale_multiplier = 4120 / wall_x	-- overall zoom level
local skew_divisor = 2.048 	--no idea what the number represents to be honest, but it changes with aspect ratio now

local centre = vmath.vector3(640, 624, 0)
centre.y = 700



local function wall_get_position(pos, depth, facing)
	local dist_near = depth * 2 + 1
	local dist_far = depth * 2 + 3
	local x_offset, scale_y, scale, skew
	local shade = 1 - (depth - 1) * player.sight_range
	if facing == 0 then
		x_offset = pos * scale_multiplier * wall_x / dist_near
		scale = vmath.vector3(scale_multiplier / dist_near, scale_multiplier / dist_near, 1)
		shade = vmath.vector4(shade, shade, 1, 1)
		skew = vmath.vector4(0, 0, 0, 0)
	else
		scale_y = -scale_multiplier * (-2 * math.abs(pos) - 1) / (dist_near * dist_far)
		scale = vmath.vector3(scale_y, scale_multiplier / dist_near, 1)
		if facing > 0 then
			x_offset = -scale_multiplier * wall_x * (-pos * dist_near - pos - dist_near * 0.5 - 0.5) / (dist_near * dist_far)
			skew = vmath.vector4((1 - dist_near / (dist_near + 2)) / skew_divisor, 0, 0, 0) * scale.y
			shade = vmath.vector4(shade, shade + player.sight_range, 1, 1)
		else
			x_offset = scale_multiplier * wall_x * (pos * dist_near + pos - dist_near * 0.5 - 0.5) / (dist_near * dist_far)
			skew = vmath.vector4(0, (1 - dist_near / (dist_near + 2)) / skew_divisor, 0, 0) * scale.y
			shade = vmath.vector4(shade + player.sight_range, shade, 1, 1)
		end
	end
	local z_pos = 1 - (depth) / 10
	local position = vmath.vector3(centre.x + x_offset, centre.y, z_pos)
	return position, scale, shade, skew
end

local function entity_get_position(pos, depth, local_x, local_y, facing, ceiling)
	local dist_near = depth * 2 + 1
	local dist_far = depth * 2 + 3
	local shade = 1 - (depth - 1) * player.sight_range + (-local_y - 1) * player.sight_range / 2
	local scale = vmath.vector3(scale_multiplier / dist_near, scale_multiplier / dist_near, 1) * 5
	local z_pos = 0.95 - (depth) / 10 --+ (local_y * 0.1) WIP - Y POS NOT TAKEN INTO ACCOUNT
	local x_offset = pos * scale_multiplier * wall_x / dist_far
	x_offset = x_offset + local_x * scale_multiplier * wall_x * 0.5 / (dist_near + 1 + local_y)
	local y_offset = -scale_multiplier * wall_x * ((dist_far + dist_near) / (4 * dist_near * dist_far))
	if ceiling then y_offset = -y_offset end
	y_offset = y_offset + local_y * (scale_multiplier * wall_x / dist_near - scale_multiplier * wall_x / dist_far) / 4
	local position = vmath.vector3(centre.x + x_offset, centre.y + y_offset, z_pos)
	if facing then
		local results = {hash("back"), hash("left"), hash("front"), hash("right")}
		local p, a
		for key, val in ipairs(F.clockwise) do
			if player.facing == val then p = key end
			if facing == val then a = key end
		end
		facing = results[(p-a)%4 + 1]
	end
	return position, scale, shade, facing
end

local function entity_draw(class, x, y, facing, position, scale, shade, data)
	local props = {facing = facing, shade = shade}
	local factory_url = "#"
	if class == hash("actor") then
		factory_url = factory_url.."actor"
	elseif class == hash("object") then
		factory_url = factory_url.."object"
	elseif class == hash("item") then
		factory_url = factory_url.."item"
	end
	table.insert(entities, {go = factory.create(factory_url, position, nil, props, scale), x = x, y = y, local_x = data.local_x, local_y = data.local_y, local_z = data.local_z, facing = data.facing, ceiling = data.ceiling})
	if class == hash("actor") then
		data.go = entities[#entities].go
	end
end 

local function wall_draw(x, y, facing, position, scale, shade, skew)
	local props = {shade = shade, skew = skew, health = map[x][y].health, health_max = map[x][y].health_max}
	local texture = map[x][y].texture
	table.insert(walls, {go = factory.create(texture, position, nil, props, scale), x = x, y = y, facing = facing})
end

local function spawn()
	table.insert(actors, {x = 7, y = 9, type = "zombie", facing = hash("S"), speed = 0.6, local_x = 0, local_y = 0})
	--table.insert(actors, {x = 11, y = 9, type = "zombie", facing = hash("E"), local_x = 0, local_y = 0})
	--table.insert(objects, {x = 7, y = 9, type = "stalagtite", local_x = 0, local_y = 0, ceiling = true})
end


local function actor_move(actor, x, y)
	actor.moving = true
	local function actor_moved()
		
	end
	timer.delay(actor.speed / 2, false, function() actor.x = x; actor.y = y end)
	timer.delay(actor.speed, false, function() actor.moving = false end)
	if actor.go then
		local pos, depth = F.coords_to_position(x, y)
		local position, scale, shade, facing = entity_get_position(pos, depth, actor.local_x, actor.local_y, actor.facing, actor.ceiling)
		go.animate(actor.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, actor.speed)
		go.animate(actor.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, actor.speed)
	end
end

local function update_view()
	-- redraw walls
	for key, val in ipairs(walls) do
		go.delete(val.go)
	end
	walls = {}
	for depth = 0, player.render_range do
		local pos_range = math.ceil((depth + 1) * 0.6) + 1
		for pos = math.max(-pos_range), math.min(pos_range) do
			local x, y = F.position_to_coords(pos, depth)
			if map[x] and map[x][y] then
				if map[x][y].wall then
					local _x, _y = F.position_to_coords(pos, depth - 1)
					if not map[_x][_y] or not map[_x][_y].wall then
						if not (depth == 0) or not (pos == 0) then
							local position, scale, shade = wall_get_position(pos, depth, 0)
							wall_draw(x, y, 0, position, scale, shade, skew)
						end
					end
					_x, _y = F.position_to_coords(pos - 1, depth)
					if pos > 0 and (not map[_x][_y] or not map[_x][_y].wall) then
						local position, scale, shade, skew = wall_get_position(pos-1, depth, 1)
						wall_draw(x, y, 1, position, scale, shade, skew)
					end
					_x, _y = F.position_to_coords(pos + 1, depth)
					if pos < 0 and (not map[_x][_y] or not map[_x][_y].wall) then
						local position, scale, shade, skew = wall_get_position(pos+1, depth, -1)
						wall_draw(x, y, -1, position, scale, shade, skew)
					end
				end
			end
		end
	end
	-- redraw entities
	for key, val in ipairs(entities) do
		go.delete(val.go)
	end
	entities = {}
	for key, val in ipairs(actors) do
		local drawn = false
		local pos, depth = F.coords_to_position(val.x, val.y)
		if depth > 0 and depth <= player.render_range then
			local pos_range = math.ceil((depth + 1) * 0.6) + 1
			if pos >= math.max(-pos_range) and pos <= math.min(pos_range) then
				local position, scale, shade, facing = entity_get_position(pos, depth, val.local_x, val.local_y, val.facing, val.ceiling)
				entity_draw(hash("actor"), val.x, val.y, facing, position, scale, shade, val)
				drawn = true
			end
		end
		if not drawn then val.go = nil end
	end
	for key, val in ipairs(objects) do
		local pos, depth = F.coords_to_position(val.x, val.y)
		if depth > 0 and depth <= player.render_range then
			local pos_range = math.ceil((depth + 1) * 0.6) + 1
			if pos >= math.max(-pos_range) and pos <= math.min(pos_range) then
				local position, scale, shade, facing = entity_get_position(pos, depth, val.local_x, val.local_y, val.facing, val.ceiling)
				entity_draw(hash("object"), val.x, val.y, facing, position, scale, shade, val)
			end
		end
	end
	for key, val in ipairs(items) do
		local pos, depth = F.coords_to_position(val.x, val.y)
		if depth > 0 and depth <= player.render_range then
			local pos_range = math.ceil((depth + 1) * 0.6) + 1
			if pos >= math.max(-pos_range) and pos <= math.min(pos_range) then
				local position, scale, shade, facing = entity_get_position(pos, depth, val.local_x, val.local_y, val.facing, val.ceiling)
				entity_draw(hash("item"), val.x, val.y, facing, position, scale, shade, val)
			end
		end
	end
end

local function move(forward)
	for key, val in ipairs(walls) do
		local pos, depth = F.coords_to_position(val.x, val.y)
		if depth > -1 then
			local position, scale, shade, skew = wall_get_position(pos - val.facing, depth, val.facing)
			msg.post(val.go, hash("skew"), {skew = skew})
			go.animate(val.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, player.step_time)
			go.animate(val.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, player.step_time)
			if forward then
				msg.post(val.go, hash("shade_plus"))
			else
				msg.post(val.go, hash("shade_minus"))
			end
		end
	end
	for key, val in ipairs(entities) do
		local pos, depth = F.coords_to_position(val.x, val.y)
		if depth > -1 then
			local position, scale, shade, facing = entity_get_position(pos, depth, val.local_x, val.local_y, val.facing, val.ceiling)
			go.animate(val.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, player.step_time)
			go.animate(val.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, player.step_time)
			go.animate(msg.url(nil, val.go, "sprite"), "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(shade, shade, shade, 1), go.EASING_LINEAR, player.step_time)
		end
	end
	timer.delay(player.step_time, false, function() update_view(); player.moving = false end)
end

local function move_side(side)
	for key, val in ipairs(walls) do
		local pos, depth = F.coords_to_position(val.x, val.y)
		if depth > 0 then
			if pos == 0 and val.facing == side then
				go.animate(val.go, "scale.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, player.step_time / 2)
				go.animate(val.go, "position.x", go.PLAYBACK_ONCE_FORWARD, centre.x, go.EASING_LINEAR, player.step_time / 2)
			else
				local position, scale, shade, skew = wall_get_position(pos - val.facing, depth, val.facing)
				msg.post(val.go, hash("skew"), {skew = skew})
				go.animate(val.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, player.step_time)
				go.animate(val.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, player.step_time)
			end
		end
	end
	for depth = 0, player.render_range do
		local x, y = F.position_to_coords(-side, depth)
		if map[x] and map[x][y] and map[x][y].wall then
			local _x, _y = F.position_to_coords(0, depth)
			if not map[_x] or not map[_x][_y] or not map[_x][_y].wall then
				if depth > 0 then
					local position, scale, shade, skew = wall_get_position(0, depth, -side)
					wall_draw(x, y, 1, vmath.vector3(centre.x, position.y, position.z), vmath.vector3(0, scale.y, scale.z), shade, skew)
					go.animate(walls[#walls].go, "scale.x", go.PLAYBACK_ONCE_FORWARD, scale.x, go.EASING_LINEAR, player.step_time / 2, player.step_time / 2)
					go.animate(walls[#walls].go, "position.x", go.PLAYBACK_ONCE_FORWARD, position.x, go.EASING_LINEAR, player.step_time / 2, player.step_time / 2)
				end
			end
		end
	end
	for key, val in ipairs(entities) do
		local pos, depth = F.coords_to_position(val.x, val.y)
		local position, scale, shade, facing = entity_get_position(pos, depth, val.local_x, val.local_y, val.facing, val.ceiling)
		go.animate(val.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, player.step_time)
		go.animate(val.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, player.step_time)
	end
	timer.delay(player.step_time, false, function() update_view(); player.moving = false end)
end

local function window_callback(self, event, data)
	if event == window.WINDOW_EVENT_FOCUS_LOST then
	elseif event == window.WINDOW_EVENT_FOCUS_GAINED then
	elseif event == window.WINDOW_EVENT_RESIZED then
		screen_size.x, screen_size.y = data.width, data.height
		skew_divisor = math.max(2.56 / (data.width / data.height), 2.048)
	end
end

function init(self)
	msg.post("@render:", "use_fixed_fit_projection", {near = -1, far = 1})
	window.set_listener(window_callback)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update") then
		update_view()
	elseif message_id == hash("forward") then
		move(true)
	elseif message_id == hash("back") then
		move(false)
	elseif message_id == hash("left") then
		move_side(-1)
	elseif message_id == hash("right") then
		move_side(1)
	elseif message_id == hash("screen_size") then
		window_callback(self, window.WINDOW_EVENT_RESIZED, {width = message.width, height = message.height})
	end
end