local player = require("main/player_info")

local walls = {}

local wall_x = 512
local scale_multiplier = 3100 / wall_x

local centre = vmath.vector3(360, 360, 0)

local render_range = 20

local map = {}
local map_bounds = {}
local tiles = {}
tiles[1] = {wall = true, texture = "#wall"}
tiles[3] = {wall = true, texture = "#wall_red"}

local function load_tilemap()
	map = {}
	map_bounds.min_x, map_bounds.min_y, map_bounds.max_x, map_bounds.max_y = tilemap.get_bounds("/minimap#minimap")
	local player_x, player_y
	local found = false
	for _x = map_bounds.min_x, map_bounds.max_x do
		for _y = map_bounds.min_y, map_bounds.max_y do
			if tilemap.get_tile("/minimap#minimap", "player", _x, _y) == 5 then
				player_x = _x; player_y = _y; break
			end
		end
		if found then break end
	end
	for _x = map_bounds.min_x, map_bounds.max_x do
		map[_x - player_x] = {}
		for _y = map_bounds.min_y, map_bounds.max_y do
			local tile = tilemap.get_tile("/minimap#minimap", "walls", _x, _y)
			if tiles[tile] then
				map[_x - player_x][_y - player_y + 1] = {wall = tiles[tile].wall; texture = tiles[tile].texture}
			end
		end
	end
	map_bounds.min_y = map_bounds.min_y - player_y + 1; map_bounds.max_y = map_bounds.max_y - player_y + 1
	map_bounds.min_x = map_bounds.min_x - player_x; map_bounds.max_x = map_bounds.max_x - player_x
end

local function get_x(pos, depth)
	local mod = 0
	local pos_x = 0
	local dist = depth * 2 + 1
	if pos < 0 then mod = 1 end
	for x = 0 + mod, math.abs(pos) - 1 + mod do
		pos_x = pos_x + wall_x * scale_multiplier / dist
	end
	if pos < 0 then pos_x = -pos_x end
	return pos_x - (wall_x * scale_multiplier / dist) / 2 
end

local function wall_front(pos, depth, facing)
	local dist = depth * 2 + 1
	local pos_x = get_x(pos, depth)
	local scale = vmath.vector3(scale_multiplier / dist, scale_multiplier / dist, 1) 
	local distance = math.sqrt(math.abs(pos)^2 + depth^2)
	local position = vmath.vector3(centre.x + pos_x, centre.y, 	0.9 / (distance + 1))
	local shade = 1 - (depth - 1) * player.sight_range
	shade = vmath.vector4(shade, shade, 1, 1)
	return position, scale, shade
end

local function wall_left(pos, depth)
	local dist = depth * 2 - 1
	local pos_x = get_x(pos, depth - 1)
	local size = get_x(pos, depth) - pos_x
	if size < 0 then return end
	local scale = vmath.vector3(size / wall_x, scale_multiplier / dist, 1) 
	local distance = math.sqrt(math.abs(pos)^2 + depth^2)
	local position = vmath.vector3(centre.x + pos_x, centre.y, 0.9 / (distance + 1))
	local skew = (1 - (dist / ((depth + 1) * 2 - 1))) / 1.4
	local shade = 1 - (depth - 1) * player.sight_range
	shade = vmath.vector4(shade + player.sight_range, shade, 1, 1)
	return position, scale, shade, skew
end

local function wall_right(pos, depth)
	local dist = depth * 2 - 1
	local pos_x = get_x(pos + 1, depth)
	local size = get_x(pos + 1, depth - 1) - pos_x
	if size < 0 then return end
	local scale = vmath.vector3(size / wall_x, scale_multiplier / dist, 1) 
	local distance = math.sqrt(math.abs(pos)^2 + depth^2)
	local position = vmath.vector3(centre.x + pos_x, centre.y, 0.9 / (distance + 1))
	local skew =  (1 - (dist / ((depth + 1) * 2 - 1))) / 1.4
	local shade = 1 - (depth - 1) * player.sight_range
	shade = vmath.vector4(shade, shade + player.sight_range, 1, 1)
	return position, scale, shade, skew
end

local function update_view()
	for key, val in ipairs(walls) do
		msg.post(val.go, "delete")
	end
	walls = {}
	for depth = 0, math.min(render_range, map_bounds.max_y) do
		local pos_range = math.ceil((depth + 1) * 0.6) + 1
		for pos = math.max(-pos_range, map_bounds.min_x), math.min(pos_range, map_bounds.max_x) do
			if map[pos][depth] and map[pos][depth].wall then
				if not map[pos][depth-1] or not map[pos][depth-1].wall then
					if not (depth == 0) or not (pos == 0) then
						local position, scale, shade = wall_front(pos, depth)
						table.insert(walls, {
							go = factory.create(map[pos][depth].texture, position, nil, {shade = shade}, scale),
							pos = pos,
							depth = depth,
							facing = hash("front")
						})
					end
				end
				if not map[pos-1][depth] or not map[pos-1][depth].wall then
					local position, scale, shade, skew = wall_right(pos-1, depth+1)
					if position then
						table.insert(walls, {
							go = factory.create(map[pos][depth].texture, position, nil, {skew_x = skew, shade = shade}, scale),
							pos = pos,
							depth = depth,
							facing = hash("right")
						})
					end
				end
				if not map[pos+1][depth] or not map[pos+1][depth].wall then
					local position, scale, shade, skew = wall_left(pos + 1, depth + 1)
					if position then
						table.insert(walls, {
							go = factory.create(map[pos][depth].texture, position, nil, {skew_y = skew, shade = shade}, scale),
							pos = pos,
							depth = depth,
							facing = hash("left")
						})
					end
				end
			end
		end
	end
end

local function move_tilemap(dir)
	local direction = {up = {x = 0, y = -1}, down = {x = 0, y = 1},	left = {x = 1, y = 0}, right = {x = -1, y = 0}}
	local map_old = map
	map = {}
	for x = map_bounds.min_x, map_bounds.max_x do
		map[x + direction[dir].x] = {}
		for y = map_bounds.min_y, map_bounds.max_y do
			map[x + direction[dir].x][y + direction[dir].y] = map_old[x][y]
		end
	end
	map_bounds.min_y = map_bounds.min_y + direction[dir].y; map_bounds.max_y = map_bounds.max_y + direction[dir].y
	map_bounds.min_x = map_bounds.min_x + direction[dir].x; map_bounds.max_x = map_bounds.max_x + direction[dir].x
	update_view()
end

local function turn_tilemap(left)
	local shift_x, shift_y
	if left then
		shift_x, shift_y = 1, map_bounds.max_x + map_bounds.min_x - 1
	else
		shift_x, shift_y = map_bounds.max_y + map_bounds.min_y - 1, -1
	end
	local map_old = map
	map = {}
	for y = map_bounds.min_y, map_bounds.max_y do map[y - shift_x] = {} end
	for x = map_bounds.min_x, map_bounds.max_x do
		for y = map_bounds.min_y, map_bounds.max_y do
			if left then
				map[y - shift_x][map_bounds.max_x - (x - map_bounds.min_x) - shift_y] = map_old[x][y]
			else
				map[map_bounds.max_y - (y - map_bounds.min_y) - shift_x][x - shift_y] = map_old[x][y]
			end
		end
	end
	local min_x, max_x, min_y, max_y = map_bounds.min_x, map_bounds.max_x, map_bounds.min_y, map_bounds.max_y
	map_bounds.min_y = min_x - shift_y; map_bounds.max_y = max_x - shift_y
	map_bounds.min_x = min_y - shift_x; map_bounds.max_x = max_y - shift_x
	update_view()
end

local move = {}

function move.forward()
	for key, val in ipairs(walls) do
		local position, scale, shade, skew
		if val.facing == hash("front") then
			position, scale, shade = wall_front(val.pos, val.depth - 1)
		elseif val.facing == hash("left") then
			position, scale, shade, skew = wall_left(val.pos + 1, val.depth)
			if position then
				local skew_real = vmath.vector4(0, skew * scale.y, 0, 0)
				go.animate(msg.url(nil, val.go, "sprite"), "skew", go.PLAYBACK_ONCE_FORWARD, skew_real, go.EASING_LINEAR, player.step_time)
			end
		elseif val.facing == hash("right") then
			position, scale, shade, skew = wall_right(val.pos - 1, val.depth)
			if position then
				local skew_real = vmath.vector4(skew * scale.y, 0, 0, 0)
				go.animate(msg.url(nil, val.go, "sprite"), "skew", go.PLAYBACK_ONCE_FORWARD, skew_real, go.EASING_LINEAR, player.step_time)
			end
		end
		if position and val.depth > 0 then
			go.animate(val.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, player.step_time)
			go.animate(val.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, player.step_time)
			msg.post(val.go, hash("shade_plus"))
		end
	end
	timer.delay(player.step_time, false, function() player.moving = false; move_tilemap("up") end)
end

function move.back()
	for key, val in ipairs(walls) do
		local position, scale, shade, skew
		if val.facing == hash("front") then
			position, scale, shade = wall_front(val.pos, val.depth + 1)
		elseif val.facing == hash("left") then
			position, scale, shade, skew = wall_left(val.pos + 1, val.depth + 2)
			if position then
				local skew_real = vmath.vector4(0, skew * scale.y, 0, 0)
				go.animate(msg.url(nil, val.go, "sprite"), "skew", go.PLAYBACK_ONCE_FORWARD, skew_real, go.EASING_LINEAR, player.step_time)
			end
		elseif val.facing == hash("right") then
			position, scale, shade, skew = wall_right(val.pos - 1, val.depth + 2)
			if position then
				local skew_real = vmath.vector4(skew * scale.y, 0, 0, 0)
				go.animate(msg.url(nil, val.go, "sprite"), "skew", go.PLAYBACK_ONCE_FORWARD, skew_real, go.EASING_LINEAR, player.step_time)
			end
		end
		if position then
			go.animate(val.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, player.step_time)
			go.animate(val.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, player.step_time)
			msg.post(val.go, hash("shade_minus"))
		end
	end
	timer.delay(player.step_time, false, function() player.moving = false; move_tilemap("down") end)
end

function move.left()
	for key, val in ipairs(walls) do
		local position, scale, skew
		if val.facing == hash("front") then
			if not (val.depth == 0) or not (math.abs(val.pos) == 1) then
				position, scale, shade = wall_front(val.pos + 1, val.depth)
			end
		elseif val.facing == hash("left") then
			position, scale, shade, skew = wall_left(val.pos + 2, val.depth + 1)
			if position then
				local skew_real = vmath.vector4(0, skew * scale.y, 0, 0)
				go.animate(msg.url(nil, val.go, "sprite"), "skew", go.PLAYBACK_ONCE_FORWARD, skew_real, go.EASING_LINEAR, player.step_time)
			elseif val.depth > 0 then
				go.animate(val.go, "scale.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, player.step_time / 2)
				go.animate(val.go, "position.x", go.PLAYBACK_ONCE_FORWARD, centre.x, go.EASING_LINEAR, player.step_time / 2)
			end
		elseif val.facing == hash("right") then
			position, scale, shade, skew = wall_right(val.pos, val.depth + 1)
			if position then
				local skew_real = vmath.vector4(skew * scale.y, 0, 0, 0)
				go.animate(msg.url(nil, val.go, "sprite"), "skew", go.PLAYBACK_ONCE_FORWARD, skew_real, go.EASING_LINEAR, player.step_time)
			end
		end
		if position then
			go.animate(val.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, player.step_time)
			go.animate(val.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, player.step_time)
		end
	end
	for depth = 0, math.min(render_range, map_bounds.max_y) do
		if map[0][depth] and map[0][depth].wall then
			if not map[-1][depth] or not map[-1][depth].wall then
				local position, scale, shade, skew = wall_right(0, depth+1)
				if position and depth > 0 then
					table.insert(walls, {
						go = factory.create(map[0][depth].texture, vmath.vector3(centre.x, position.y, position.z), nil, {skew_x = skew, shade = shade}, vmath.vector3(0, scale.y, scale.z)),
						pos = 0,
						depth = depth,
						facing = hash("right")
					})
					go.animate(walls[#walls].go, "scale.x", go.PLAYBACK_ONCE_FORWARD, scale.x, go.EASING_LINEAR, player.step_time / 2, player.step_time / 2)
					go.animate(walls[#walls].go, "position.x", go.PLAYBACK_ONCE_FORWARD, position.x, go.EASING_LINEAR, player.step_time / 2, player.step_time / 2)
				end
			end
		end
	end
	timer.delay(player.step_time, false, function() player.moving = false; move_tilemap("left") end)
end

function move.right()
	for key, val in ipairs(walls) do
		local position, scale, shade, skew
		if val.facing == hash("front") then
			if not (val.depth == 0) or not (math.abs(val.pos) == 1) then
				position, scale, shade = wall_front(val.pos - 1, val.depth)
			end
		elseif val.facing == hash("left") then
			position, scale, shade, skew = wall_left(val.pos, val.depth + 1)
			if position then
				local skew_real = vmath.vector4(0, skew * scale.y, 0, 0)
				go.animate(msg.url(nil, val.go, "sprite"), "skew", go.PLAYBACK_ONCE_FORWARD, skew_real, go.EASING_LINEAR, player.step_time)
			end
		elseif val.facing == hash("right") then
			position, scale, shade, skew = wall_right(val.pos - 2, val.depth + 1)
			if position then
				local skew_real = vmath.vector4(skew * scale.y, 0, 0, 0)
				go.animate(msg.url(nil, val.go, "sprite"), "skew", go.PLAYBACK_ONCE_FORWARD, skew_real, go.EASING_LINEAR, player.step_time)
			elseif val.depth > 0 then
				go.animate(val.go, "scale.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, player.step_time / 2)
				go.animate(val.go, "position.x", go.PLAYBACK_ONCE_FORWARD, centre.x, go.EASING_LINEAR, player.step_time / 2)
			end
		end
		if position then
			go.animate(val.go, "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, player.step_time)
			go.animate(val.go, "scale", go.PLAYBACK_ONCE_FORWARD, scale, go.EASING_LINEAR, player.step_time)
		end
	end
	for depth = 0, math.min(render_range, map_bounds.max_y) do
		if map[0][depth] and map[0][depth].wall then
			if not map[1][depth] or not map[1][depth].wall then
				local position, scale, shade, skew = wall_left(0, depth+1)
				if position and depth > 0 then
					table.insert(walls, {
						go = factory.create(map[0][depth].texture, vmath.vector3(centre.x, position.y, position.z), nil, {skew_y = skew, shade = shade}, vmath.vector3(0, scale.y, scale.z)),
						pos = 0,
						depth = depth,
						facing = hash("left")
					})
					go.animate(walls[#walls].go, "scale.x", go.PLAYBACK_ONCE_FORWARD, scale.x, go.EASING_LINEAR, player.step_time / 2, player.step_time / 2)
					go.animate(walls[#walls].go, "position.x", go.PLAYBACK_ONCE_FORWARD, position.x, go.EASING_LINEAR, player.step_time / 2, player.step_time / 2)
				end
			end
		end
	end
	timer.delay(player.step_time, false, function() player.moving = false; move_tilemap("right") end)
end


function init(self)
	map_bounds.min_x, map_bounds.min_y, map_bounds.max_x, map_bounds.max_y = tilemap.get_bounds("/minimap#minimap")
	load_tilemap()
	update_view()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update") then
		update_view()
	elseif message_id == hash("forward") then
		if not map[0][2] or not map[0][2].wall then
			move.forward()
		else
			player.moving = false
		end
	elseif message_id == hash("back") then
		if not map[0][0] or not map[0][0].wall then
			move.back()
		else
			player.moving = false
		end
	elseif message_id == hash("left") then
		if not map[-1][1] or not map[-1][1].wall then
			move.left()
		else
			player.moving = false
		end
	elseif message_id == hash("right") then
		if not map[1][1] or not map[1][1].wall then
			move.right()
		else
			player.moving = false
		end
	elseif message_id == hash("turn_left") then
		turn_tilemap(true)
	elseif message_id == hash("turn_right") then
		turn_tilemap(false)
	end
end

function on_input(self, action_id, action)
	
end




